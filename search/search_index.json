{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Python Data Model \u00b6 Welcome to dunder docs, a lightweight reference for the python data model.","title":"Landing"},{"location":"#python-data-model","text":"Welcome to dunder docs, a lightweight reference for the python data model.","title":"Python Data Model"},{"location":"Builtins/abs/","text":"","title":"abs"},{"location":"Dunder%20Methods/__bool__/","text":"Dunder __bool__ \u00b6 Used for built-in truth value testing and invoked by the builtin bool(...) method. This method should return either False or True booleans respectively and if a dunder __bool__ is omitted from a class, instances of such class will be checked based on a __len__ . In the event that __len__ exists, anything other than nonzero is considered True . If neither a __bool__ or __len__ are defined, instances of such classes are determined to be True in a boolean context.` Examples \u00b6 User defined classes by default will return True when evaluated in a boolean context. This is because neither __bool__ or __len__ are defined. Default User Defined Objects 1 2 3 4 class Default : ... bool ( Default ()) # True In order to override the boolean behaviour, implement __bool__ and return True | False accordingly. Custom dunder bool 1 2 3 4 5 6 7 8 9 10 class DunderBool : def __init__ ( self , x : int ) -> None : self . x = x def __bool__ ( self ) -> bool : return self . x > 100 bool ( DunderBool ( 100 )) # False bool ( DunderBool ( 101 )) # True If __len__ is implemented and __bool_ is not, __len__ is used as a fallback, where non-zero values are considered True . Fallback to __len__ 1 2 3 4 5 6 7 8 9 10 11 12 13 from typing import Optional from typing import List class FallbackToLen : def __init__ ( self , container : Optional [ List [ int ]] = None ) -> None : self . container = container or [] def __len__ ( self ) -> int : return len ( self . container ) bool ( FallbackToLen ([ 1 ])) # True bool ( FallbackToLen ()) # False Python Docs \u00b6 Read More","title":"__bool__"},{"location":"Dunder%20Methods/__bool__/#dunder-__bool__","text":"Used for built-in truth value testing and invoked by the builtin bool(...) method. This method should return either False or True booleans respectively and if a dunder __bool__ is omitted from a class, instances of such class will be checked based on a __len__ . In the event that __len__ exists, anything other than nonzero is considered True . If neither a __bool__ or __len__ are defined, instances of such classes are determined to be True in a boolean context.`","title":"Dunder __bool__"},{"location":"Dunder%20Methods/__bool__/#examples","text":"User defined classes by default will return True when evaluated in a boolean context. This is because neither __bool__ or __len__ are defined. Default User Defined Objects 1 2 3 4 class Default : ... bool ( Default ()) # True In order to override the boolean behaviour, implement __bool__ and return True | False accordingly. Custom dunder bool 1 2 3 4 5 6 7 8 9 10 class DunderBool : def __init__ ( self , x : int ) -> None : self . x = x def __bool__ ( self ) -> bool : return self . x > 100 bool ( DunderBool ( 100 )) # False bool ( DunderBool ( 101 )) # True If __len__ is implemented and __bool_ is not, __len__ is used as a fallback, where non-zero values are considered True . Fallback to __len__ 1 2 3 4 5 6 7 8 9 10 11 12 13 from typing import Optional from typing import List class FallbackToLen : def __init__ ( self , container : Optional [ List [ int ]] = None ) -> None : self . container = container or [] def __len__ ( self ) -> int : return len ( self . container ) bool ( FallbackToLen ([ 1 ])) # True bool ( FallbackToLen ()) # False","title":"Examples"},{"location":"Dunder%20Methods/__bool__/#python-docs","text":"Read More","title":"Python Docs"},{"location":"Dunder%20Methods/__bytes__/","text":"","title":"__bytes__"},{"location":"Dunder%20Methods/__del__/","text":"","title":"__del__"},{"location":"Dunder%20Methods/__eq__/","text":"","title":"__eq__"},{"location":"Dunder%20Methods/__format__/","text":"","title":"__format__"},{"location":"Dunder%20Methods/__ge__/","text":"","title":"__ge__"},{"location":"Dunder%20Methods/__gt__/","text":"","title":"__gt__"},{"location":"Dunder%20Methods/__hash__/","text":"","title":"__hash__"},{"location":"Dunder%20Methods/__init__/","text":"","title":"__init__"},{"location":"Dunder%20Methods/__le__/","text":"","title":"__le__"},{"location":"Dunder%20Methods/__lt__/","text":"","title":"__lt__"},{"location":"Dunder%20Methods/__ne__/","text":"","title":"__ne__"},{"location":"Dunder%20Methods/__new__/","text":"","title":"__new__"},{"location":"Dunder%20Methods/__repr__/","text":"","title":"__repr__"},{"location":"Dunder%20Methods/__str__/","text":"","title":"__str__"}]}